(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{361:function(t,e,a){"use strict";a.r(e);var s=a(9),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"flex布局语法与实战技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex布局语法与实战技巧"}},[t._v("#")]),t._v(" Flex布局语法与实战技巧")]),t._v(" "),a("p",[t._v("​\t\t布局(layout)是CSS中十分重要的一项技术，传统的布局方案，基于盒子模型，依赖display属性+position属性+float属性。在日常使用中，虽然这样的方案已经能实现大多数的需求，但是在某些特殊布局上还是有些困难（如垂直居中）。")]),t._v(" "),a("p",[t._v("​\t\tFlex布局，即弹性盒子布局，是W3C提出的一种布局方案。可以简便、完整、响应式地实现各种布局。目前所有浏览器都已支持flex属性。")]),t._v(" "),a("p",[t._v("​\t\t此处对Flex布局做一个总结归纳，如不理解概念可参考阮一峰老师的《Flex 布局教程》。")]),t._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("p",[t._v("​\t\tFlex布局包括Flex容器与Flex项目，采用Flex属性的元素成为容器，其内部所有子元素成为项目,且子元素的float、clear、vertical-align都将失效。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​\t\tflex布局默认存在两条轴，水平的主轴和垂直的交叉轴。")]),t._v(" "),a("h3",{attrs:{id:"容器的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器的属性"}},[t._v("#")]),t._v(" 容器的属性")]),t._v(" "),a("h4",{attrs:{id:"flex-diretion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-diretion"}},[t._v("#")]),t._v(" flex-diretion")]),t._v(" "),a("p",[t._v("​\t\t决定主轴的方向（即项目的排列顺序），可选属性有row|row-reverse|column|column-reverse")]),t._v(" "),a("h4",{attrs:{id:"flex-wrap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-wrap"}},[t._v("#")]),t._v(" flex-wrap")]),t._v(" "),a("p",[t._v("​\t\t决定当一条轴线排不下项目时，该如何进行换行。可选属性有nowrap|wrap|wrap-reverse")]),t._v(" "),a("p",[t._v("​\t\tnowrap：不换行；wrap：换行，第一行在上方；wrap-reverse：换行，第一行在下方。")]),t._v(" "),a("h4",{attrs:{id:"flex-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-flow"}},[t._v("#")]),t._v(" flex-flow")]),t._v(" "),a("p",[t._v("​\t\t是felx-direcion和flex-wrap的简写模式，默认值为 row wrap。")]),t._v(" "),a("h4",{attrs:{id:"justify-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#justify-content"}},[t._v("#")]),t._v(" justify-content")]),t._v(" "),a("p",[t._v("​\t\t决定在主轴上的对齐方式，可选属性有flex-start|flex-end|center|space-between|space-around，分别为左对齐、右对齐、居中、两端对齐且项目之间的距离相等、每个项目两侧的间距相等。")]),t._v(" "),a("h4",{attrs:{id:"align-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-items"}},[t._v("#")]),t._v(" align-items")]),t._v(" "),a("p",[t._v("​\t\t决定在交叉轴上的对齐方式，可选属性有flex-start|flex-end|center|stretch|baseline，分别为交叉轴的起点对齐、终点对齐、居中、如果为设置高度将沾满整个容器的高度、项目的第一行文字的基线对齐。")]),t._v(" "),a("h4",{attrs:{id:"align-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-content"}},[t._v("#")]),t._v(" align-content")]),t._v(" "),a("p",[t._v("​\t\t决定多根轴线的对齐方式，可选属性有flex-start|flex-end|center|strech|space-between|space-around")]),t._v(" "),a("h3",{attrs:{id:"项目的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目的属性"}},[t._v("#")]),t._v(" 项目的属性")]),t._v(" "),a("h4",{attrs:{id:"order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order"}},[t._v("#")]),t._v(" order")]),t._v(" "),a("p",[t._v("​\t\t属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。")]),t._v(" "),a("h4",{attrs:{id:"flex-grow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow"}},[t._v("#")]),t._v(" flex-grow")]),t._v(" "),a("p",[t._v("​\t\t属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。")]),t._v(" "),a("h4",{attrs:{id:"flex-shrink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink"}},[t._v("#")]),t._v(" flex-shrink")]),t._v(" "),a("p",[t._v("​\t\t属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。")]),t._v(" "),a("h4",{attrs:{id:"flex-basis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis"}},[t._v("#")]),t._v(" flex-basis")]),t._v(" "),a("p",[t._v("​\t\t属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为"),a("code",[t._v("auto")]),t._v("，即项目的本来大小。")]),t._v(" "),a("h4",{attrs:{id:"flex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[t._v("#")]),t._v(" flex")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("flex")]),t._v("属性是"),a("code",[t._v("flex-grow")]),t._v(", "),a("code",[t._v("flex-shrink")]),t._v(" 和 "),a("code",[t._v("flex-basis")]),t._v("的简写，默认值为"),a("code",[t._v("0 1 auto")]),t._v("。后两个属性可选。")]),t._v(" "),a("h4",{attrs:{id:"align-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-self"}},[t._v("#")]),t._v(" align-self")]),t._v(" "),a("p",[t._v("​\t\t"),a("code",[t._v("align-self")]),t._v("属性允许单个项目有与其他项目不一样的对齐方式，可覆盖"),a("code",[t._v("align-items")]),t._v("属性。默认值为"),a("code",[t._v("auto")]),t._v("，表示继承父元素的"),a("code",[t._v("align-items")]),t._v("属性，如果没有父元素，则等同于"),a("code",[t._v("stretch")]),t._v("。可选属性有auto | flex-start | flex-end | center | baseline | stretch。")]),t._v(" "),a("h2",{attrs:{id:"实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[t._v("#")]),t._v(" 实战")]),t._v(" "),a("p",[t._v("​\t\t等待更新。。。")]),t._v(" "),a("p",[t._v("​")])])}),[],!1,null,null,null);e.default=r.exports}}]);